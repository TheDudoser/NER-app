import io
import os
import sys
import threading
from ipymarkup import show_span_ascii_markup

import customtkinter
from tkinter import filedialog

import torch
from transformers import AutoModelForTokenClassification, AutoTokenizer, pipeline

from .base_window import BaseWindow


class AddTextWindow(BaseWindow):
    def __init__(self, parent):
        super().__init__(parent, title="–†–∞–∑–º–µ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ —Ç–µ–∫—Å—Ç–∞", width=900, height=700)
        self.text_input = None
        self.process_button = None
        self.loading_label = ''
        self.ner_pipeline = None

        self._setup_keyboard_shortcuts()

        # –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        self.render_text_input_and_process_btn()
        self.render_loading_indicator()
        self.show_loading("–ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏...")
        self.render_go_back_button()

        # –ó–∞—Ç–µ–º –∑–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å –≤ —Ñ–æ–Ω–µ
        threading.Thread(target=self.load_model, daemon=True).start()

    def render_text_input_and_process_btn(self):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤–≤–æ–¥–∞ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –∏ –∫–Ω–æ–ø–∫–∏ –†–∞–∑–º–µ—Ç–∏—Ç—å"""
        text_frame = customtkinter.CTkFrame(self)
        text_frame.pack(pady=20, padx=20, fill="both", expand=False)

        text_label = customtkinter.CTkLabel(text_frame, text="–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞–∑–º–µ—Ç–∫–∏:", font=("Arial", 14))
        text_label.pack(pady=10)

        # –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ
        self.text_input = customtkinter.CTkTextbox(
            text_frame,
            font=("Arial", 12),
            wrap="word",
            height=200,
            state="normal",  # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ "normal" –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            undo=True,
            maxundo=-1
        )
        self.text_input.pack(pady=10, padx=10, fill="both", expand=False)

        self.process_button = customtkinter.CTkButton(text_frame, text="–†–∞–∑–º–µ—Ç–∏—Ç—å", command=self.start_processing)
        self.process_button.pack(pady=20)

    def _setup_keyboard_shortcuts(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ—Ä—è—á–∏—Ö –∫–ª–∞–≤–∏—à –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Ä–∞—Å–∫–ª–∞–¥–∫–∏"""
        self.bind("<Control-KeyPress>", self._handle_keypress)
        self.bind("<Command-KeyPress>", self._handle_keypress)

    @staticmethod
    def _handle_keypress(event):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–æ—Ä—è—á–∏—Ö –∫–ª–∞–≤–∏—à –ø–æ keycode"""
        # Keycodes –¥–ª—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
        key_actions = {
            67: '<<Copy>>',  # Ctrl+C
            86: '<<Paste>>',  # Ctrl+V
            88: '<<Cut>>',  # Ctrl+X
            90: '<<Undo>>',  # Ctrl+Z
            89: '<<Redo>>',  # Ctrl+Y
            65: '<<SelectAll>>'  # Ctrl+A
        }

        if event.keycode in key_actions:
            event.widget.event_generate(key_actions[event.keycode])
            return "break"  # –ë–ª–æ–∫–∏—Ä—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ

    def render_loading_indicator(self):
        # –§—Ä–µ–π–º –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∑–∞–≥—Ä—É–∑–∫–∏
        self.loading_frame = customtkinter.CTkFrame(self)
        self.loading_label_widget = customtkinter.CTkLabel(  # –ò–∑–º–µ–Ω–∏–ª –∏–º—è –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
            self.loading_frame,
            text="",  # –ò–∑–Ω–∞—á–∞–ª—å–Ω–æ –ø—É—Å—Ç–æ–π —Ç–µ–∫—Å—Ç
            font=("Arial", 12)
        )
        self.loading_label_widget.pack(pady=5)

        self.model_loading_bar = customtkinter.CTkProgressBar(
            self.loading_frame,
            mode="indeterminate"
        )
        self.model_loading_bar.pack(pady=5, padx=20, fill="x")
        self.loading_frame.pack_forget()  # –°–∫—Ä—ã–≤–∞–µ–º –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ

    def show_loading(self, loading_label: str = ''):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏"""
        self.loading_label_widget.configure(text=loading_label)  # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –ª–µ–π–±–ª–∞
        self.loading_frame.pack(pady=10, padx=20, fill="x")
        self.model_loading_bar.start()

    def hide_loading(self):
        """–°–∫—Ä—ã—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏"""
        self.model_loading_bar.stop()
        self.loading_frame.pack_forget()

    def load_model(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º –Ω–∞ –¥–∏—Å–∫"""
        # model_name = "ai-forever/sbert_large_nlu_ru" # TODO: –û–Ω–∞ –Ω–µ –æ–±—É—á–µ–Ω–∞ –∏ –ø–æ—ç—Ç–æ–º—É –∏–∑–≤–ª–µ–∫–∞–µ—Ç –≤—Å—ë –ø–æ–¥—Ä—è–¥, –Ω–∞–º —ç—Ç–æ –ø–æ–¥—Ö–æ–¥–∏—Ç?
        # model_name = "DeepPavlov/rubert-base-cased" # TODO: –¢–æ–∂–µ —Å–∞–º–æ–µ, –Ω–µ –æ–±—É—á–µ–Ω–∞
        model_name = "Davlan/bert-base-multilingual-cased-ner-hrl" # TODO: –û–±—É—á–µ–Ω–∞, –Ω–æ –º–∞–ª–æ —Å—É—â–Ω–æ—Å—Ç–µ–π
        cache_dir = ".cache/ner_model"  # –ü–∞–ø–∫–∞ –¥–ª—è –∫—ç—à–∞

        try:
            # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –∫—ç—à–∞
            os.makedirs(cache_dir, exist_ok=True)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–∞—è –º–æ–¥–µ–ª—å
            if os.path.exists(os.path.join(cache_dir, "config.json")):
                print("üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∫—ç—à–∞...")
                self.show_loading("–ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ –∏–∑ –∫—ç—à–∞...")
                # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å –∏ —Ç–æ–∫–µ–Ω–∏–∑–∞—Ç–æ—Ä –∏–∑ –∫—ç—à–∞
                model = AutoModelForTokenClassification.from_pretrained(cache_dir)
                tokenizer = AutoTokenizer.from_pretrained(cache_dir)
            else:
                print("üåê –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ –∏–∑ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞...")
                self.show_loading("–°–∫–∞—á–∏–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏...")
                # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å –∏ —Ç–æ–∫–µ–Ω–∏–∑–∞—Ç–æ—Ä –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
                model = AutoModelForTokenClassification.from_pretrained(model_name)
                tokenizer = AutoTokenizer.from_pretrained(model_name)
                model.save_pretrained(cache_dir)
                tokenizer.save_pretrained(cache_dir)

            # –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Å–ø–æ—Å–æ–± –∑–∞–≥—Ä—É–∑–∫–∏ (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∫—ç—à)
            self.ner_pipeline = pipeline(
                "ner",
                model=model,
                aggregation_strategy="simple",
                tokenizer=tokenizer,
                device=0 if torch.cuda.is_available() else -1
            )

            print(f"‚úÖ –ú–æ–¥–µ–ª—å –ó–∞–≥—Ä—É–∂–µ–Ω–∞! –ü—É—Ç—å: {cache_dir}")
            self.hide_loading()
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏: {e}")
            self.hide_loading()

    def render_results_display(self):
        # –†–∞–º–∫–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ NER
        self.results_frame = customtkinter.CTkFrame(self)
        self.results_frame.pack(pady=20, padx=20, fill="both", expand=True)

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        results_label = customtkinter.CTkLabel(self.results_frame, text="–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞–∑–º–µ—Ç–∫–∏:", font=("Arial", 14))
        results_label.pack(pady=10)

        # –¢–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ –¥–ª—è –≤—ã–≤–æ–¥–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (–º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω—ã–π –≤–∏–¥–∂–µ—Ç)
        self.results_output = customtkinter.CTkTextbox(
            self.results_frame,
            font=("Arial", 12),
            wrap="word",
            height=200,
            state="disabled"  # –°–Ω–∞—á–∞–ª–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        )
        self.results_output.pack(pady=10, padx=10, fill="both", expand=True)

    def process_text(self):
        try:
            text = self.text_input.get("1.0", "end-1c").strip()
            if not text:
                self.show_error("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞–∑–º–µ—Ç–∫–∏!")
                return

            if not self.ner_pipeline:
                self.show_error("–ú–æ–¥–µ–ª—å –µ—â—ë –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è...")
                return

            self.show_loading("–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞...")

            # –ü–µ—Ä–µ–¥–∞—ë–º –≤–µ—Å—å —Ç–µ–∫—Å—Ç —Ü–µ–ª–∏–∫–æ–º (–ø–∞–π–ø–ª–∞–π–Ω —Å–∞–º —Ä–∞–∑–æ–±—å—ë—Ç –µ–≥–æ –Ω–∞ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ —á–∞—Å—Ç–∏)
            entities = self.ner_pipeline(text)

            self.hide_loading()

            # –ï—Å–ª–∏ –µ—â—ë –Ω–µ —Å–æ–∑–¥–∞–Ω–æ –æ–∫–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ - —Å–æ–∑–¥–∞—ë–º
            if not hasattr(self, 'results_frame'):
                self.render_results_display()

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫—Ä–∞—Å–∏–≤–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            self.display_results(entities, text)

        except Exception as e:
            self.hide_loading()
            self.show_error(f"–û—à–∏–±–∫–∞: {str(e)}")
        finally:
            self.enable_ui()

    def display_results(self, entities, text):
        # –í—ã–≤–æ–¥ —Å—É—â–Ω–æ—Å—Ç–µ–π –≤ –∫–æ–Ω—Å–æ–ª—å (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
        for entity in entities:
            print(
                f"–°—É—â–Ω–æ—Å—Ç—å: {entity['word']:20} ‚Üí –¢–∏–ø: {entity['entity_group']:15} (–¢–æ—á–Ω–æ—Å—Ç—å: {entity['score']:.4f})")

        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ spans –¥–ª—è ipymarkup
        spans = [(ent['start'], ent['end'], ent['entity_group']) for ent in entities]

        # –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º –≤—ã–≤–æ–¥ show_span_ascii_markup
        output = io.StringIO()
        old_stdout = sys.stdout
        sys.stdout = output  # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º stdout

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º ASCII-—Ä–∞–∑–º–µ—Ç–∫—É
        show_span_ascii_markup(text, spans)

        sys.stdout = old_stdout  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º stdout
        marked_text = output.getvalue()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ marked_text –Ω–µ –ø—É—Å—Ç–æ–π
        print()
        print("DEBUG - Marked Text:", repr(marked_text))  # –î–ª—è –æ—Ç–ª–∞–¥–∫–∏

        # –í—Å—Ç–∞–≤–ª—è–µ–º –≤ CTkTextbox (–ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–≤)
        self.results_output.configure(state="normal")  # –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º
        self.results_output.delete("1.0", "end")  # –û—á–∏—â–∞–µ–º (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
        self.results_output.insert("end", marked_text)  # –í—Å—Ç–∞–≤–ª—è–µ–º
        self.results_output.configure(state="disabled")  # –ë–ª–æ–∫–∏—Ä—É–µ–º

    def disable_ui(self):
        """–†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ—Ç —ç–ª–µ–º–µ–Ω—Ç—ã UI –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
        self.text_input.configure(state="disabled")
        self.process_button.configure(state="disabled")
        self.back_button.configure(state="disabled")

    def enable_ui(self):
        """–†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ—Ç —ç–ª–µ–º–µ–Ω—Ç—ã UI –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
        self.text_input.configure(state="normal")
        self.process_button.configure(state="normal")
        self.back_button.configure(state="normal")

    def show_error(self, message):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ"""
        self.results_output.configure(state="normal")
        self.results_output.delete("1.0", "end")
        self.results_output.insert("end", f"–û—à–∏–±–∫–∞: {message}")
        self.results_output.configure(state="disabled")

    def clear_text_input(self):
        self.text_input.delete("1.0", "end")

    def upload_file(self):
        file_path = filedialog.askopenfilename(filetypes=[("Text Files", "*.txt"), ("All Files", "*.*")])
        if file_path:
            try:
                with open(file_path, "r", encoding="utf-8") as file:
                    content = file.read()
                    self.text_input.delete("1.0", "end")
                    self.text_input.insert("1.0", content)
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞: {e}")

    def start_processing(self):
        self.show_loading()
        self.disable_ui()
        self.process_text()
